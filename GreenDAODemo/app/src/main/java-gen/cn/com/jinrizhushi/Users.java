package cn.com.jinrizhushi;

import cn.com.jinrizhushi.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USERS".
 */
public class Users implements java.io.Serializable {

    private Long id;
    private String mobile;
    private Long counId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UsersDao myDao;

    private CounselorExtInfo counselorExtInfo;
    private Long counselorExtInfo__resolvedKey;


    public Users() {
    }

    public Users(Long id) {
        this.id = id;
    }

    public Users(Long id, String mobile, Long counId) {
        this.id = id;
        this.mobile = mobile;
        this.counId = counId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsersDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public Long getCounId() {
        return counId;
    }

    public void setCounId(Long counId) {
        this.counId = counId;
    }

    /** To-one relationship, resolved on first access. */
    public CounselorExtInfo getCounselorExtInfo() {
        Long __key = this.counId;
        if (counselorExtInfo__resolvedKey == null || !counselorExtInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CounselorExtInfoDao targetDao = daoSession.getCounselorExtInfoDao();
            CounselorExtInfo counselorExtInfoNew = targetDao.load(__key);
            synchronized (this) {
                counselorExtInfo = counselorExtInfoNew;
            	counselorExtInfo__resolvedKey = __key;
            }
        }
        return counselorExtInfo;
    }

    public void setCounselorExtInfo(CounselorExtInfo counselorExtInfo) {
        synchronized (this) {
            this.counselorExtInfo = counselorExtInfo;
            counId = counselorExtInfo == null ? null : counselorExtInfo.getId();
            counselorExtInfo__resolvedKey = counId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
